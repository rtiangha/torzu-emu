# SPDX-FileCopyrightText: 2022 torzu Emulator Project
# SPDX-License-Identifier: GPL-3.0-or-later

name: 'torzu-build'

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]

jobs:
  Windows-MSVC:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["msvc"]
    defaults:
      run:
        shell: ${{ (matrix.target == 'msys2' && 'msys2') || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up cache
        uses: actions/cache@v4.0.2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1.13.0
        if: ${{ matrix.target == 'msvc' }}
      - name: Install extra tools (MSVC)
        run: choco install ccache ninja wget openssl
        if: ${{ matrix.target == 'msvc' }}
      - name: Install Vulkan SDK (MSVC)
        uses: humbletim/install-vulkan-sdk@v1.1.1
        with:
          version: latest
          cache: true
        if: ${{ matrix.target == 'msvc' }}
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          version: '6.7.*'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          modules: 'qtpositioning qtwebchannel qtwebengine qtwebsockets qtwebview'
      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
            # REQUIRED: Specify the required boost version
            # A list of supported versions can be found here:
            # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
            boost_version: 1.85.0
            # OPTIONAL: Specify a platform version
            platform_version: 2022
            # OPTIONAL: Specify a toolset
            toolset: msvc
            link: static
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
      - name: Configure cmake (MSVC)
        run: |
            mkdir build && cd build && cmake .. -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DBoost_INCLUDE_DIR=${{steps.install-boost.outputs.BOOST_ROOT}}/include \
                -DBoost_LIBRARY_DIRS=${{steps.install-boost.outputs.BOOST_ROOT}}/lib \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DTORZU_USE_BUNDLED_VCPKG=OFF \
                -DTORZU_TESTS=OFF \
                -DTORZU_ENABLE_LTO=ON \
                -DTORZU_USE_EXTERNAL_VULKAN_HEADERS=ON \
                -DTORZU_USE_EXTERNAL_VULKAN_SPIRV_TOOLS=ON \
                -DTORZU_USE_EXTERNAL_VULKAN_UTILITY_LIBRARIES=ON \
                -DTORZU_USE_EXTERNAL_VULKAN_SPIRV_TOOLS=ON \
                -DALLOW_EXTERNAL_SPIRV_TOOLS=ON \
                -DTORZU_USE_BUNDLED_QT=OFF \
                -DTORZU_USE_BUNDLED_SDL2=OFF \
                -DTORZU_USE_EXTERNAL_SDL2=ON \
                -DUSE_DISCORD_PRESENCE=ON \
                -DTORZU_USE_QT_WEB_ENGINE=ON \
                -DUSE_SYSTEM_ZSTD=OFF \
                -DUSE_SYSTEM_FMT=OFF \
                -DENABLE_WEB_SERVICE=OFF \
                -DENABLE_QT6=ON \
                -DQT_VERSION=6 
        env:
            BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
      - name: Build (MSVC)
        run: ./.ci/windows-msvc.sh
        env:
            BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        if: ${{ matrix.target == 'msvc' }}
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  Windows-CLANG:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["msys2"]
    defaults:
      run:
        shell: ${{ (matrix.target == 'msys2' && 'msys2') || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.0.2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1.13.0
      - name: Install Vulkan SDK
        uses: humbletim/install-vulkan-sdk@v1.1.1
        with:
          version: latest
          cache: true
      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
            # REQUIRED: Specify the required boost version
            # A list of supported versions can be found here:
            # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
            boost_version: 1.85.0
            # OPTIONAL: Specify a platform version
            platform_version: 2022
            # OPTIONAL: Specify a toolset
            toolset: msvc
            link: static
      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2.24.1
        with:
          msystem: clang64
          update: true
          install: git make p7zip autoconf libtool automake-wrapper lz4 liblz4-devel
          pacboy: >-
            qt6:p toolchain:p ccache:p cmake:p ninja:p ffmpeg:p
            python-pip:p glslang:p lz4:p libusb:p pkg-config:p
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
      - name: Build (MSYS2)
        run: ./.ci/windows-msys2.sh
        env:
            BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
            Boost_INCLUDE_DIR: ${{steps.install-boost.outputs.BOOST_ROOT}}/include
            Boost_LIBRARY_DIRS: ${{steps.install-boost.outputs.BOOST_ROOT}}/lib
      - name: Pack
        run: ./.ci/pack.sh
        env:
            BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
            Boost_INCLUDE_DIR: ${{steps.install-boost.outputs.BOOST_ROOT}}/include
            Boost_LIBRARY_DIRS: ${{steps.install-boost.outputs.BOOST_ROOT}}/lib
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  Android:
    runs-on: ubuntu-24.04
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: android
      TARGET: universal
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up cache
        uses: actions/cache@v4.0.2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.ccache
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-
      - name: Query tag name
        uses: olegtarasov/get-tag@v2.1.3
        id: tagName
      - name: Set up JDK 22
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '22'
          distribution: 'temurin'
      - name: Install New Packages
        uses: gerlero/apt-install@v1.2.2
        with:
          packages: ccache apksigner glslang-dev glslang-tools apparmor cloud-init firefox libapparmor1 libapr1t64 libcups2t64 libopenjp2-7 libproc2-0 linux-azure linux-cloud-tools-azure linux-headers-azure linux-image-azure linux-tools-azure lxd-agent-loader mdadm nvme-cli open-vm-tools procps python3-update-manager systemd-hwe-hwdb ubuntu-pro-client ubuntu-pro-client-l10n update-manager-core php8.3 php8.3-bcmath php8.3-bz2 php8.3-cgi php8.3-cli php8.3-common php8.3-curl php8.3-dba php8.3-dev php8.3-enchant php8.3-fpm php8.3-gd php8.3-gmp php8.3-imap php8.3-interbase php8.3-intl php8.3-ldap php8.3-mbstring php8.3-mysql php8.3-odbc php8.3-opcache php8.3-pgsql php8.3-phpdbg php8.3-pspell php8.3-readline php8.3-snmp php8.3-soap php8.3-sqlite3 php8.3-sybase php8.3-tidy php8.3-xml php8.3-xsl php8.3-zip vim vim-common vim-runtime vim-tiny xxd
      - name: Update system packages
        run: |
          sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Build
        run: JAVA_HOME=$JAVA_HOME_22_X64 ./.ci/scripts/android/build.sh
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.DROID_KEYSTORE_B64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.DROID_KEY_ALIAS }}
          ANDROID_KEYSTORE_PASS: ${{ secrets.DROID_KEYSTORE_PASS }}
      - name: Copy artifacts
        run: ./.ci/scripts/android/upload.sh
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: android
          path: artifacts/
